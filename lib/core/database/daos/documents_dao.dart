import 'package:drift/drift.dart';
import '../app_database.dart';
import '../tables/documents_table.dart';
import '../tables/bundle_documents_table.dart';

part 'documents_dao.g.dart'; // This file will be generated by build_runner

@DriftAccessor(tables: [Documents,BundleDocuments])
class DocumentsDao extends DatabaseAccessor<AppDatabase> with _$DocumentsDaoMixin {
  DocumentsDao(AppDatabase db) : super(db);

  // WATCH: Returns a stream that automatically emits new items when the data changes
  Stream<List<Document>> watchAllDocuments() => select(documents).watch();

  Stream<List<Document>> watchFavoriteDocuments() {
    return (select(documents)..where((tbl) => tbl.isFavorite.equals(true))).watch();
  }

  Future<Document> getDocumentById(int id) {
    return (select(documents)..where((tbl) => tbl.id.equals(id))).getSingle();
  }
  
  // CREATE: Inserts a new document
  Future<int> insertDocument(DocumentsCompanion document) {
    return into(documents).insert(document);
  }

  // UPDATE: Updates an existing document
  Future<bool> updateDocument(DocumentsCompanion document) {
    return update(documents).replace(document);
  }

  // DELETE: Removes a document
  Future<int> deleteDocument(int id) {
    return (delete(documents)..where((tbl) => tbl.id.equals(id))).go();
  }

  // Additional methods for managing document links, such as bundles or reminders, can be added here
  Future<void> deleteDocumentAndLinks(int id) {
  return transaction(() async {
    // First, delete all links in the join table that reference this document
      await (delete(bundleDocuments)..where((tbl) => tbl.documentId.equals(id))).go();
    // Then, delete the document itself (this reuses your existing delete method)
      await deleteDocument(id);
    });
  }

  /// Fetches a list of documents that expire before the given date.
  Future<List<Document>> getExpiringDocuments(DateTime beforeDate) {
    return (select(documents)
          ..where((tbl) => tbl.expirationDate.isSmallerThanValue(beforeDate))
          ..where((tbl) => tbl.expirationDate.isNotNull()))
        .get();
  }
}
